//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import RswiftResources
import UIKit

private class BundleFinder {}
let R = _R(bundle: Bundle(for: BundleFinder.self))

struct _R {
  let bundle: Foundation.Bundle
  var string: string { .init(bundle: bundle, preferredLanguages: nil, locale: nil) }
  var color: color { .init(bundle: bundle) }
  var image: image { .init(bundle: bundle) }
  var info: info { .init(bundle: bundle) }
  var font: font { .init(bundle: bundle) }
  var file: file { .init(bundle: bundle) }
  var storyboard: storyboard { .init(bundle: bundle) }

  func string(bundle: Foundation.Bundle) -> string {
    .init(bundle: bundle, preferredLanguages: nil, locale: nil)
  }
  func string(locale: Foundation.Locale) -> string {
    .init(bundle: bundle, preferredLanguages: nil, locale: locale)
  }
  func string(preferredLanguages: [String], locale: Locale? = nil) -> string {
    .init(bundle: bundle, preferredLanguages: preferredLanguages, locale: locale)
  }
  func color(bundle: Foundation.Bundle) -> color {
    .init(bundle: bundle)
  }
  func image(bundle: Foundation.Bundle) -> image {
    .init(bundle: bundle)
  }
  func info(bundle: Foundation.Bundle) -> info {
    .init(bundle: bundle)
  }
  func font(bundle: Foundation.Bundle) -> font {
    .init(bundle: bundle)
  }
  func file(bundle: Foundation.Bundle) -> file {
    .init(bundle: bundle)
  }
  func storyboard(bundle: Foundation.Bundle) -> storyboard {
    .init(bundle: bundle)
  }
  func validate() throws {
    try self.font.validate()
    try self.storyboard.validate()
  }

  struct project {
    let developmentRegion = "en"
  }

  /// This `_R.string` struct is generated, and contains static references to 2 localization tables.
  struct string {
    let bundle: Foundation.Bundle
    let preferredLanguages: [String]?
    let locale: Locale?
    var launchScreen: launchScreen { .init(source: .init(bundle: bundle, tableName: "LaunchScreen", preferredLanguages: preferredLanguages, locale: locale)) }
    var localizable: localizable { .init(source: .init(bundle: bundle, tableName: "Localizable", preferredLanguages: preferredLanguages, locale: locale)) }

    func launchScreen(preferredLanguages: [String]) -> launchScreen {
      .init(source: .init(bundle: bundle, tableName: "LaunchScreen", preferredLanguages: preferredLanguages, locale: locale))
    }
    func localizable(preferredLanguages: [String]) -> localizable {
      .init(source: .init(bundle: bundle, tableName: "Localizable", preferredLanguages: preferredLanguages, locale: locale))
    }


    /// This `_R.string.launchScreen` struct is generated, and contains static references to 0 localization keys.
    struct launchScreen {
      let source: RswiftResources.StringResource.Source
    }

    /// This `_R.string.localizable` struct is generated, and contains static references to 51 localization keys.
    struct localizable {
      let source: RswiftResources.StringResource.Source

      /// en translation: A temporary error has currently occurred. occurred.Please contact the person in charge . [010-8705-1693] [%@]
      ///
      /// Key: apiServiceResponseToErrorWithUIMessage
      ///
      /// Locales: ko, en
      var apiServiceResponseToErrorWithUIMessage: RswiftResources.StringResource1<String> { .init(key: "apiServiceResponseToErrorWithUIMessage", tableName: "Localizable", source: source, developmentValue: "A temporary error has currently occurred.\noccurred.Please contact the person in charge\n.\n[010-8705-1693]\n[%@]", comment: nil) }

      /// en translation: Ok
      ///
      /// Key: apiServiceResponseToErrorWithUIOK
      ///
      /// Locales: ko, en
      var apiServiceResponseToErrorWithUIOK: RswiftResources.StringResource { .init(key: "apiServiceResponseToErrorWithUIOK", tableName: "Localizable", source: source, developmentValue: "Ok", comment: nil) }

      /// en translation: Do you like this champion?
      ///
      /// Key: championDetailInformationTitle
      ///
      /// Locales: ko, en
      var championDetailInformationTitle: RswiftResources.StringResource { .init(key: "championDetailInformationTitle", tableName: "Localizable", source: source, developmentValue: "Do you like this champion?", comment: nil) }

      /// en translation: Gallery
      ///
      /// Key: galleryTabTitle
      ///
      /// Locales: ko, en
      var galleryTabTitle: RswiftResources.StringResource { .init(key: "galleryTabTitle", tableName: "Localizable", source: source, developmentValue: "Gallery", comment: nil) }

      /// en translation: Gallery
      ///
      /// Key: galleryTitle
      ///
      /// Locales: ko, en
      var galleryTitle: RswiftResources.StringResource { .init(key: "galleryTitle", tableName: "Localizable", source: source, developmentValue: "Gallery", comment: nil) }

      /// en translation: Assassin
      ///
      /// Key: homeAssassin
      ///
      /// Locales: ko, en
      var homeAssassin: RswiftResources.StringResource { .init(key: "homeAssassin", tableName: "Localizable", source: source, developmentValue: "Assassin", comment: nil) }

      /// en translation: will_d
      ///
      /// Key: homeDianaRecommend
      ///
      /// Locales: ko, en
      var homeDianaRecommend: RswiftResources.StringResource { .init(key: "homeDianaRecommend", tableName: "Localizable", source: source, developmentValue: "will_d", comment: nil) }

      /// en translation: Scorn of the Moon
      ///
      /// Key: homeDianaTitle
      ///
      /// Locales: ko, en
      var homeDianaTitle: RswiftResources.StringResource { .init(key: "homeDianaTitle", tableName: "Localizable", source: source, developmentValue: "Scorn of the Moon", comment: nil) }

      /// en translation: will_d
      ///
      /// Key: homeEzrealRecommend
      ///
      /// Locales: ko, en
      var homeEzrealRecommend: RswiftResources.StringResource { .init(key: "homeEzrealRecommend", tableName: "Localizable", source: source, developmentValue: "will_d", comment: nil) }

      /// en translation: the Prodigal Explorer
      ///
      /// Key: homeEzrealTitle
      ///
      /// Locales: ko, en
      var homeEzrealTitle: RswiftResources.StringResource { .init(key: "homeEzrealTitle", tableName: "Localizable", source: source, developmentValue: "the Prodigal Explorer", comment: nil) }

      /// en translation: Fighter
      ///
      /// Key: homeFighter
      ///
      /// Locales: ko, en
      var homeFighter: RswiftResources.StringResource { .init(key: "homeFighter", tableName: "Localizable", source: source, developmentValue: "Fighter", comment: nil) }

      /// en translation: Shall we take a closer look?
      ///
      /// Key: homeLetsTakeCloserLook
      ///
      /// Locales: ko, en
      var homeLetsTakeCloserLook: RswiftResources.StringResource { .init(key: "homeLetsTakeCloserLook", tableName: "Localizable", source: source, developmentValue: "Shall we take a closer look?", comment: nil) }

      /// en translation: Mage
      ///
      /// Key: homeMage
      ///
      /// Locales: ko, en
      var homeMage: RswiftResources.StringResource { .init(key: "homeMage", tableName: "Localizable", source: source, developmentValue: "Mage", comment: nil) }

      /// en translation: Marksman
      ///
      /// Key: homeMarksman
      ///
      /// Locales: ko, en
      var homeMarksman: RswiftResources.StringResource { .init(key: "homeMarksman", tableName: "Localizable", source: source, developmentValue: "Marksman", comment: nil) }

      /// en translation: %@ Recommendation
      ///
      /// Key: homeRecommend
      ///
      /// Locales: ko, en
      var homeRecommend: RswiftResources.StringResource1<String> { .init(key: "homeRecommend", tableName: "Localizable", source: source, developmentValue: "%@ Recommendation", comment: nil) }

      /// en translation: %d skins %@
      ///
      /// Key: homeSkinCount
      ///
      /// Locales: ko, en
      var homeSkinCount: RswiftResources.StringResource2<Int, String> { .init(key: "homeSkinCount", tableName: "Localizable", source: source, developmentValue: "%d skins %@", comment: nil) }

      /// en translation: Support
      ///
      /// Key: homeSupport
      ///
      /// Locales: ko, en
      var homeSupport: RswiftResources.StringResource { .init(key: "homeSupport", tableName: "Localizable", source: source, developmentValue: "Support", comment: nil) }

      /// en translation: Home
      ///
      /// Key: homeTabTitle
      ///
      /// Locales: ko, en
      var homeTabTitle: RswiftResources.StringResource { .init(key: "homeTabTitle", tableName: "Localizable", source: source, developmentValue: "Home", comment: nil) }

      /// en translation: Daily
      ///
      /// Key: homeTalonRecommend
      ///
      /// Locales: ko, en
      var homeTalonRecommend: RswiftResources.StringResource { .init(key: "homeTalonRecommend", tableName: "Localizable", source: source, developmentValue: "Daily", comment: nil) }

      /// en translation: the Blade's Shadow
      ///
      /// Key: homeTalonTitle
      ///
      /// Locales: ko, en
      var homeTalonTitle: RswiftResources.StringResource { .init(key: "homeTalonTitle", tableName: "Localizable", source: source, developmentValue: "the Blade's Shadow", comment: nil) }

      /// en translation: Tank
      ///
      /// Key: homeTank
      ///
      /// Locales: ko, en
      var homeTank: RswiftResources.StringResource { .init(key: "homeTank", tableName: "Localizable", source: source, developmentValue: "Tank", comment: nil) }

      /// en translation: Bottom
      ///
      /// Key: lookAroundBottom
      ///
      /// Locales: ko, en
      var lookAroundBottom: RswiftResources.StringResource { .init(key: "lookAroundBottom", tableName: "Localizable", source: source, developmentValue: "Bottom", comment: nil) }

      /// en translation: Bronze
      ///
      /// Key: lookAroundBronze
      ///
      /// Locales: ko, en
      var lookAroundBronze: RswiftResources.StringResource { .init(key: "lookAroundBronze", tableName: "Localizable", source: source, developmentValue: "Bronze", comment: nil) }

      /// en translation: Challenger
      ///
      /// Key: lookAroundChallenger
      ///
      /// Locales: ko, en
      var lookAroundChallenger: RswiftResources.StringResource { .init(key: "lookAroundChallenger", tableName: "Localizable", source: source, developmentValue: "Challenger", comment: nil) }

      /// en translation: Assassin
      ///
      /// Key: lookAroundChartCategoryAssassinTitle
      ///
      /// Locales: ko, en
      var lookAroundChartCategoryAssassinTitle: RswiftResources.StringResource { .init(key: "lookAroundChartCategoryAssassinTitle", tableName: "Localizable", source: source, developmentValue: "Assassin", comment: nil) }

      /// en translation: Fighter
      ///
      /// Key: lookAroundChartCategoryFighterTitle
      ///
      /// Locales: ko, en
      var lookAroundChartCategoryFighterTitle: RswiftResources.StringResource { .init(key: "lookAroundChartCategoryFighterTitle", tableName: "Localizable", source: source, developmentValue: "Fighter", comment: nil) }

      /// en translation: Mage
      ///
      /// Key: lookAroundChartCategoryMageTitle
      ///
      /// Locales: ko, en
      var lookAroundChartCategoryMageTitle: RswiftResources.StringResource { .init(key: "lookAroundChartCategoryMageTitle", tableName: "Localizable", source: source, developmentValue: "Mage", comment: nil) }

      /// en translation: Marksman
      ///
      /// Key: lookAroundChartCategoryMarksmanTitle
      ///
      /// Locales: ko, en
      var lookAroundChartCategoryMarksmanTitle: RswiftResources.StringResource { .init(key: "lookAroundChartCategoryMarksmanTitle", tableName: "Localizable", source: source, developmentValue: "Marksman", comment: nil) }

      /// en translation: Support
      ///
      /// Key: lookAroundChartCategorySupportTitle
      ///
      /// Locales: ko, en
      var lookAroundChartCategorySupportTitle: RswiftResources.StringResource { .init(key: "lookAroundChartCategorySupportTitle", tableName: "Localizable", source: source, developmentValue: "Support", comment: nil) }

      /// en translation: Tank
      ///
      /// Key: lookAroundChartCategoryTankTitle
      ///
      /// Locales: ko, en
      var lookAroundChartCategoryTankTitle: RswiftResources.StringResource { .init(key: "lookAroundChartCategoryTankTitle", tableName: "Localizable", source: source, developmentValue: "Tank", comment: nil) }

      /// en translation: Diamond
      ///
      /// Key: lookAroundDiamond
      ///
      /// Locales: ko, en
      var lookAroundDiamond: RswiftResources.StringResource { .init(key: "lookAroundDiamond", tableName: "Localizable", source: source, developmentValue: "Diamond", comment: nil) }

      /// en translation: Gold
      ///
      /// Key: lookAroundGold
      ///
      /// Locales: ko, en
      var lookAroundGold: RswiftResources.StringResource { .init(key: "lookAroundGold", tableName: "Localizable", source: source, developmentValue: "Gold", comment: nil) }

      /// en translation: Grandmaster
      ///
      /// Key: lookAroundGrandmaster
      ///
      /// Locales: ko, en
      var lookAroundGrandmaster: RswiftResources.StringResource { .init(key: "lookAroundGrandmaster", tableName: "Localizable", source: source, developmentValue: "Grandmaster", comment: nil) }

      /// en translation: Position
      ///
      /// Key: lookAroundInterestedStatusPositionTitle
      ///
      /// Locales: ko, en
      var lookAroundInterestedStatusPositionTitle: RswiftResources.StringResource { .init(key: "lookAroundInterestedStatusPositionTitle", tableName: "Localizable", source: source, developmentValue: "Position", comment: nil) }

      /// en translation: Tier
      ///
      /// Key: lookAroundInterestedStatusTierTitle
      ///
      /// Locales: ko, en
      var lookAroundInterestedStatusTierTitle: RswiftResources.StringResource { .init(key: "lookAroundInterestedStatusTierTitle", tableName: "Localizable", source: source, developmentValue: "Tier", comment: nil) }

      /// en translation: Iron
      ///
      /// Key: lookAroundIron
      ///
      /// Locales: ko, en
      var lookAroundIron: RswiftResources.StringResource { .init(key: "lookAroundIron", tableName: "Localizable", source: source, developmentValue: "Iron", comment: nil) }

      /// en translation: Jungle
      ///
      /// Key: lookAroundJungle
      ///
      /// Locales: ko, en
      var lookAroundJungle: RswiftResources.StringResource { .init(key: "lookAroundJungle", tableName: "Localizable", source: source, developmentValue: "Jungle", comment: nil) }

      /// en translation: Master
      ///
      /// Key: lookAroundMaster
      ///
      /// Locales: ko, en
      var lookAroundMaster: RswiftResources.StringResource { .init(key: "lookAroundMaster", tableName: "Localizable", source: source, developmentValue: "Master", comment: nil) }

      /// en translation: Mid
      ///
      /// Key: lookAroundMiddle
      ///
      /// Locales: ko, en
      var lookAroundMiddle: RswiftResources.StringResource { .init(key: "lookAroundMiddle", tableName: "Localizable", source: source, developmentValue: "Mid", comment: nil) }

      /// en translation: Platinum
      ///
      /// Key: lookAroundPlatinum
      ///
      /// Locales: ko, en
      var lookAroundPlatinum: RswiftResources.StringResource { .init(key: "lookAroundPlatinum", tableName: "Localizable", source: source, developmentValue: "Platinum", comment: nil) }

      /// en translation: Silver
      ///
      /// Key: lookAroundSilver
      ///
      /// Locales: ko, en
      var lookAroundSilver: RswiftResources.StringResource { .init(key: "lookAroundSilver", tableName: "Localizable", source: source, developmentValue: "Silver", comment: nil) }

      /// en translation: Support
      ///
      /// Key: lookAroundSupport
      ///
      /// Locales: ko, en
      var lookAroundSupport: RswiftResources.StringResource { .init(key: "lookAroundSupport", tableName: "Localizable", source: source, developmentValue: "Support", comment: nil) }

      /// en translation: As of %@
      ///
      /// Key: lookAroundSupportChartBaseOnTheDate
      ///
      /// Locales: ko, en
      var lookAroundSupportChartBaseOnTheDate: RswiftResources.StringResource1<String> { .init(key: "lookAroundSupportChartBaseOnTheDate", tableName: "Localizable", source: source, developmentValue: "As of %@", comment: nil) }

      /// en translation: Good supporters at a glance!
      ///
      /// Key: lookAroundSupportChartDescription
      ///
      /// Locales: ko, en
      var lookAroundSupportChartDescription: RswiftResources.StringResource { .init(key: "lookAroundSupportChartDescription", tableName: "Localizable", source: source, developmentValue: "Good supporters at a glance!", comment: nil) }

      /// en translation: Good supporter 
      ///
      /// Key: lookAroundSupportChartTitle
      ///
      /// Locales: ko, en
      var lookAroundSupportChartTitle: RswiftResources.StringResource { .init(key: "lookAroundSupportChartTitle", tableName: "Localizable", source: source, developmentValue: "Good supporter\n", comment: nil) }

      /// en translation: Arround
      ///
      /// Key: lookAroundTabTitle
      ///
      /// Locales: ko, en
      var lookAroundTabTitle: RswiftResources.StringResource { .init(key: "lookAroundTabTitle", tableName: "Localizable", source: source, developmentValue: "Arround", comment: nil) }

      /// en translation: Around
      ///
      /// Key: lookAroundTitle
      ///
      /// Locales: ko, en
      var lookAroundTitle: RswiftResources.StringResource { .init(key: "lookAroundTitle", tableName: "Localizable", source: source, developmentValue: "Around", comment: nil) }

      /// en translation: Top
      ///
      /// Key: lookAroundTop
      ///
      /// Locales: ko, en
      var lookAroundTop: RswiftResources.StringResource { .init(key: "lookAroundTop", tableName: "Localizable", source: source, developmentValue: "Top", comment: nil) }

      /// en translation: As of %@
      ///
      /// Key: lookAroundWilldChartBaseOnTheDate
      ///
      /// Locales: ko, en
      var lookAroundWilldChartBaseOnTheDate: RswiftResources.StringResource1<String> { .init(key: "lookAroundWilldChartBaseOnTheDate", tableName: "Localizable", source: source, developmentValue: "As of %@", comment: nil) }

      /// en translation: will_d's recommendation
      ///
      /// Key: lookAroundWilldChartDescription
      ///
      /// Locales: ko, en
      var lookAroundWilldChartDescription: RswiftResources.StringResource { .init(key: "lookAroundWilldChartDescription", tableName: "Localizable", source: source, developmentValue: "will_d's recommendation", comment: nil) }

      /// en translation: will_d Chart
      ///
      /// Key: lookAroundWilldChartTitle
      ///
      /// Locales: ko, en
      var lookAroundWilldChartTitle: RswiftResources.StringResource { .init(key: "lookAroundWilldChartTitle", tableName: "Localizable", source: source, developmentValue: "will_d Chart", comment: nil) }
    }
  }

  /// This `_R.color` struct is generated, and contains static references to 4 colors.
  struct color {
    let bundle: Foundation.Bundle

    /// Color `AccentColor`.
    var accentColor: RswiftResources.ColorResource { .init(name: "AccentColor", path: [], bundle: bundle) }

    /// Color `nestStepBlack`.
    var nestStepBlack: RswiftResources.ColorResource { .init(name: "nestStepBlack", path: [], bundle: bundle) }

    /// Color `nestStepBrand`.
    var nestStepBrand: RswiftResources.ColorResource { .init(name: "nestStepBrand", path: [], bundle: bundle) }

    /// Color `nestStepLightBlack`.
    var nestStepLightBlack: RswiftResources.ColorResource { .init(name: "nestStepLightBlack", path: [], bundle: bundle) }
  }

  /// This `_R.image` struct is generated, and contains static references to 15 images.
  struct image {
    let bundle: Foundation.Bundle

    /// Image `positionBottom`.
    var positionBottom: RswiftResources.ImageResource { .init(name: "positionBottom", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `positionJungle`.
    var positionJungle: RswiftResources.ImageResource { .init(name: "positionJungle", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `positionMiddle`.
    var positionMiddle: RswiftResources.ImageResource { .init(name: "positionMiddle", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `positionSupport`.
    var positionSupport: RswiftResources.ImageResource { .init(name: "positionSupport", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `positionTop`.
    var positionTop: RswiftResources.ImageResource { .init(name: "positionTop", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `tierBronze`.
    var tierBronze: RswiftResources.ImageResource { .init(name: "tierBronze", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `tierChallenger`.
    var tierChallenger: RswiftResources.ImageResource { .init(name: "tierChallenger", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `tierDiamond`.
    var tierDiamond: RswiftResources.ImageResource { .init(name: "tierDiamond", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `tierGold`.
    var tierGold: RswiftResources.ImageResource { .init(name: "tierGold", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `tierGrandmaster`.
    var tierGrandmaster: RswiftResources.ImageResource { .init(name: "tierGrandmaster", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `tierIron`.
    var tierIron: RswiftResources.ImageResource { .init(name: "tierIron", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `tierMaster`.
    var tierMaster: RswiftResources.ImageResource { .init(name: "tierMaster", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `tierPlatinum`.
    var tierPlatinum: RswiftResources.ImageResource { .init(name: "tierPlatinum", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `tierSilver`.
    var tierSilver: RswiftResources.ImageResource { .init(name: "tierSilver", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `will_d`.
    var will_d: RswiftResources.ImageResource { .init(name: "will_d", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }
  }

  /// This `_R.info` struct is generated, and contains static references to 1 properties.
  struct info {
    let bundle: Foundation.Bundle
    var uiApplicationSceneManifest: uiApplicationSceneManifest { .init(bundle: bundle) }

    func uiApplicationSceneManifest(bundle: Foundation.Bundle) -> uiApplicationSceneManifest {
      .init(bundle: bundle)
    }

    struct uiApplicationSceneManifest {
      let bundle: Foundation.Bundle

      let uiApplicationSupportsMultipleScenes: Bool = false

      var _key: String { bundle.infoDictionaryString(path: ["UIApplicationSceneManifest"], key: "_key") ?? "UIApplicationSceneManifest" }
      var uiSceneConfigurations: uiSceneConfigurations { .init(bundle: bundle) }

      func uiSceneConfigurations(bundle: Foundation.Bundle) -> uiSceneConfigurations {
        .init(bundle: bundle)
      }

      struct uiSceneConfigurations {
        let bundle: Foundation.Bundle
        var _key: String { bundle.infoDictionaryString(path: ["UIApplicationSceneManifest", "UISceneConfigurations"], key: "_key") ?? "UISceneConfigurations" }
        var uiWindowSceneSessionRoleApplication: uiWindowSceneSessionRoleApplication { .init(bundle: bundle) }

        func uiWindowSceneSessionRoleApplication(bundle: Foundation.Bundle) -> uiWindowSceneSessionRoleApplication {
          .init(bundle: bundle)
        }

        struct uiWindowSceneSessionRoleApplication {
          let bundle: Foundation.Bundle
          var defaultConfiguration: defaultConfiguration { .init(bundle: bundle) }

          func defaultConfiguration(bundle: Foundation.Bundle) -> defaultConfiguration {
            .init(bundle: bundle)
          }

          struct defaultConfiguration {
            let bundle: Foundation.Bundle
            var uiSceneConfigurationName: String { bundle.infoDictionaryString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication"], key: "UISceneConfigurationName") ?? "Default Configuration" }
            var uiSceneDelegateClassName: String { bundle.infoDictionaryString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication"], key: "UISceneDelegateClassName") ?? "$(PRODUCT_MODULE_NAME).SceneDelegate" }
          }
        }
      }
    }
  }

  /// This `_R.font` struct is generated, and contains static references to 2 fonts.
  struct font: Sequence {
    let bundle: Foundation.Bundle

    /// Font `NotoSans-Regular`.
    var notoSansRegular: RswiftResources.FontResource { .init(name: "NotoSans-Regular", bundle: bundle, filename: "NotoSans-Regular.ttf") }

    /// Font `NotoSans-SemiBold`.
    var notoSansSemiBold: RswiftResources.FontResource { .init(name: "NotoSans-SemiBold", bundle: bundle, filename: "NotoSans-SemiBold.ttf") }

    func makeIterator() -> IndexingIterator<[RswiftResources.FontResource]> {
      [notoSansRegular, notoSansSemiBold].makeIterator()
    }
    func validate() throws {
      for font in self {
        if !font.canBeLoaded() { throw RswiftResources.ValidationError("[R.swift] Font '\(font.name)' could not be loaded, is '\(font.filename)' added to the UIAppFonts array in this targets Info.plist?") }
      }
    }
  }

  /// This `_R.file` struct is generated, and contains static references to 3 resource files.
  struct file {
    let bundle: Foundation.Bundle

    /// Resource file `NotoSans-Regular.ttf`.
    var notoSansRegularTtf: RswiftResources.FileResource { .init(name: "NotoSans-Regular", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `NotoSans-SemiBold.ttf`.
    var notoSansSemiBoldTtf: RswiftResources.FileResource { .init(name: "NotoSans-SemiBold", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `defaultLoading.json`.
    var defaultLoadingJson: RswiftResources.FileResource { .init(name: "defaultLoading", pathExtension: "json", bundle: bundle, locale: LocaleReference.none) }
  }

  /// This `_R.storyboard` struct is generated, and contains static references to 1 storyboards.
  struct storyboard {
    let bundle: Foundation.Bundle
    var launchScreen: launchScreen { .init(bundle: bundle) }

    func launchScreen(bundle: Foundation.Bundle) -> launchScreen {
      .init(bundle: bundle)
    }
    func validate() throws {
      try self.launchScreen.validate()
    }


    /// Storyboard `LaunchScreen`.
    struct launchScreen: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = UIKit.UIViewController

      let bundle: Foundation.Bundle

      let name = "LaunchScreen"
      func validate() throws {

      }
    }
  }
}